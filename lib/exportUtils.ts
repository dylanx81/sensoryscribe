export interface ExportData {
  text: string;
  genre: string;
  sense: string;
  radarScores: {
    sight: number;
    sound: number;
    touch: number;
    taste: number;
    smell: number;
  };
  feedback: string;
  timestamp?: string;
  rewriteSuggestions?: Array<{
    sense: string;
    originalSentences: string[];
    rewrittenSentences: string[];
    explanation: string;
    improvement: string;
  }>;
}

export type ExportFormat = 'txt' | 'md';

// Generate formatted content for export
export const generateExportContent = (data: ExportData, format: ExportFormat): string => {
  const timestamp = data.timestamp || new Date().toLocaleString();
  const totalScore = Object.values(data.radarScores).reduce((sum, score) => sum + score, 0);
  const averageScore = (totalScore / 5).toFixed(1);

  if (format === 'md') {
    return generateMarkdownContent(data, timestamp, averageScore);
  } else {
    return generateTextContent(data, timestamp, averageScore);
  }
};

// Generate Markdown format
const generateMarkdownContent = (data: ExportData, timestamp: string, averageScore: string): string => {
  return `# Sensory Scribe Analysis Report

**Generated:** ${timestamp}  
**Genre:** ${data.genre}  
**Focus Sense:** ${data.sense}  
**Average Score:** ${averageScore}/10

---

## Original Text

\`\`\`
${data.text}
\`\`\`

---

## Sensory Analysis Scores

| Sense | Score | Rating |
|-------|-------|--------|
| 👁️ Sight | ${data.radarScores.sight}/10 | ${getScoreRating(data.radarScores.sight)} |
| 👂 Sound | ${data.radarScores.sound}/10 | ${getScoreRating(data.radarScores.sound)} |
| ✋ Touch | ${data.radarScores.touch}/10 | ${getScoreRating(data.radarScores.touch)} |
| 👅 Taste | ${data.radarScores.taste}/10 | ${getScoreRating(data.radarScores.taste)} |
| 👃 Smell | ${data.radarScores.smell}/10 | ${getScoreRating(data.radarScores.smell)} |

### Score Breakdown
- **Highest Scoring Sense:** ${getHighestSense(data.radarScores)}
- **Lowest Scoring Sense:** ${getLowestSense(data.radarScores)}
- **Overall Average:** ${averageScore}/10

---

## AI Feedback

${data.feedback}

---

## Recommendations

### Quick Improvements
${generateQuickTips(data.radarScores)}

### Genre-Specific Tips for ${data.genre}
${getGenreSpecificTips(data.genre)}

${data.rewriteSuggestions && data.rewriteSuggestions.length > 0 ? `---

## ✨ Rewrite Suggestions

${data.rewriteSuggestions.map(suggestion => `### ${getSenseDisplayName(suggestion.sense)} Enhancement

**Strategy:** ${suggestion.explanation}

**${data.genre} Improvement:** ${suggestion.improvement}

${suggestion.originalSentences.map((original, index) => `#### Before:
\`\`\`
${original}
\`\`\`

#### Enhanced:
\`\`\`
${suggestion.rewrittenSentences[index]}
\`\`\`

`).join('')}`).join('\n')}` : ''}

---

*Generated by [Sensory Scribe](https://github.com/dylanx81/sensoryscribe) - Improve your fiction writing with AI-powered sensory analysis.*
`;
};

// Generate plain text format
const generateTextContent = (data: ExportData, timestamp: string, averageScore: string): string => {
  return `SENSORY SCRIBE ANALYSIS REPORT
${'='.repeat(50)}

Generated: ${timestamp}
Genre: ${data.genre}
Focus Sense: ${data.sense}
Average Score: ${averageScore}/10

${'='.repeat(50)}
ORIGINAL TEXT
${'='.repeat(50)}

${data.text}

${'='.repeat(50)}
SENSORY ANALYSIS SCORES
${'='.repeat(50)}

Sight:  ${data.radarScores.sight}/10  (${getScoreRating(data.radarScores.sight)})
Sound:  ${data.radarScores.sound}/10  (${getScoreRating(data.radarScores.sound)})
Touch:  ${data.radarScores.touch}/10  (${getScoreRating(data.radarScores.touch)})
Taste:  ${data.radarScores.taste}/10  (${getScoreRating(data.radarScores.taste)})
Smell:  ${data.radarScores.smell}/10  (${getScoreRating(data.radarScores.smell)})

Highest Scoring Sense: ${getHighestSense(data.radarScores)}
Lowest Scoring Sense: ${getLowestSense(data.radarScores)}
Overall Average: ${averageScore}/10

${'='.repeat(50)}
AI FEEDBACK
${'='.repeat(50)}

${data.feedback}

${'='.repeat(50)}
RECOMMENDATIONS
${'='.repeat(50)}

QUICK IMPROVEMENTS:
${generateQuickTips(data.radarScores)}

GENRE-SPECIFIC TIPS FOR ${data.genre.toUpperCase()}:
${getGenreSpecificTips(data.genre)}

${data.rewriteSuggestions && data.rewriteSuggestions.length > 0 ? `${'='.repeat(50)}
REWRITE SUGGESTIONS
${'='.repeat(50)}

${data.rewriteSuggestions.map(suggestion => `${suggestion.sense.toUpperCase()} ENHANCEMENT:

Strategy: ${suggestion.explanation}

${data.genre} Improvement: ${suggestion.improvement}

${suggestion.originalSentences.map((original, index) => `BEFORE:
${original}

ENHANCED:
${suggestion.rewrittenSentences[index]}

${'─'.repeat(30)}
`).join('')}`).join('\n')}` : ''}

${'='.repeat(50)}

Generated by Sensory Scribe
Improve your fiction writing with AI-powered sensory analysis.
GitHub: https://github.com/dylanx81/sensoryscribe
`;
};

// Helper functions
const getSenseDisplayName = (sense: string): string => {
  const senseNames: Record<string, string> = {
    sight: '👁️ Sight',
    sound: '👂 Sound', 
    touch: '✋ Touch',
    taste: '👅 Taste',
    smell: '👃 Smell'
  };
  
  return senseNames[sense] || sense;
};

const getScoreRating = (score: number): string => {
  if (score >= 9) return 'Excellent';
  if (score >= 7) return 'Good';
  if (score >= 5) return 'Average';
  if (score >= 3) return 'Needs Work';
  return 'Poor';
};

const getHighestSense = (scores: ExportData['radarScores']): string => {
  const entries = Object.entries(scores);
  const highest = entries.reduce((a, b) => scores[a[0] as keyof typeof scores] > scores[b[0] as keyof typeof scores] ? a : b);
  return `${highest[0]} (${highest[1]}/10)`;
};

const getLowestSense = (scores: ExportData['radarScores']): string => {
  const entries = Object.entries(scores);
  const lowest = entries.reduce((a, b) => scores[a[0] as keyof typeof scores] < scores[b[0] as keyof typeof scores] ? a : b);
  return `${lowest[0]} (${lowest[1]}/10)`;
};

const generateQuickTips = (scores: ExportData['radarScores']): string => {
  const tips: string[] = [];
  
  if (scores.sight < 6) {
    tips.push('- Add more visual details: colors, shapes, lighting, expressions');
  }
  if (scores.sound < 6) {
    tips.push('- Include auditory elements: dialogue, background noise, music, silence');
  }
  if (scores.touch < 6) {
    tips.push('- Describe textures, temperatures, physical sensations, contact');
  }
  if (scores.taste < 6) {
    tips.push('- Incorporate taste descriptions: food, drink, fear, medicine');
  }
  if (scores.smell < 6) {
    tips.push('- Add olfactory details: perfume, cooking, nature, decay');
  }
  
  if (tips.length === 0) {
    tips.push('- Great sensory balance! Consider deepening existing descriptions');
    tips.push('- Experiment with unexpected sensory combinations');
  }
  
  return tips.join('\n');
};

const getGenreSpecificTips = (genre: string): string => {
  const tips: Record<string, string> = {
    'Romance': '- Focus on touch and scent for intimate moments\n- Use taste metaphors for emotional experiences\n- Visual details should enhance attraction and beauty',
    'Thriller': '- Sound creates tension and alerts readers to danger\n- Tactile sensations convey physical stress and fear\n- Sharp, sudden sensory contrasts build suspense',
    'Fantasy': '- Rich visual worldbuilding with magical elements\n- Unique tastes and smells for otherworldly experiences\n- Tactile magic systems and creature encounters',
    'Horror': '- Smell often signals decay, danger, or wrongness\n- Unexpected sounds create dread and anticipation\n- Visceral touch sensations amplify fear responses',
    'Literary Fiction': '- Sensory details should reflect character psychology\n- Use synesthesia and unexpected sense combinations\n- Layer sensory elements to create mood and meaning',
    'Mystery': '- Sensory clues should advance the plot\n- Contrasting sensory details create atmosphere\n- Use smell and touch for forensic-style discoveries',
    'Science Fiction': '- Invent new sensory experiences for alien worlds\n- Technology should enhance or alter sensory perception\n- Contrast familiar and unfamiliar sensory elements'
  };
  
  return tips[genre] || '- Focus on sensory details that enhance your story\'s unique atmosphere\n- Use all five senses to create immersive experiences\n- Match sensory intensity to emotional beats';
};

// Download file function
export const downloadFile = (content: string, filename: string): void => {
  if (typeof window === 'undefined') return;
  
  try {
    const blob = new Blob([content], { type: 'text/plain;charset=utf-8' });
    const url = URL.createObjectURL(blob);
    const link = document.createElement('a');
    
    link.href = url;
    link.download = filename;
    link.style.display = 'none';
    
    document.body.appendChild(link);
    link.click();
    document.body.removeChild(link);
    
    // Clean up the URL object
    URL.revokeObjectURL(url);
  } catch (error) {
    console.error('Error downloading file:', error);
  }
};

// Generate filename with timestamp
export const generateFilename = (format: ExportFormat, genre: string): string => {
  const timestamp = new Date().toISOString().slice(0, 19).replace(/[:.]/g, '-');
  const cleanGenre = genre.toLowerCase().replace(/\s+/g, '-');
  return `sensory-analysis-${cleanGenre}-${timestamp}.${format}`;
};